/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import styles from 'css/index';
import _store from 'comp/mixins/store';
import {  RefreshControl, Text, View, Image, ListView, ActivityIndicator, TouchableHighlight, } from 'react-native';
import Spinner from 'comp/widgets/Spinner'


// pure list
let _data = [];
export class pure extends Component {
    constructor(props){
        super(props);
        this.state = {
            dataSource: new ListView.DataSource({
                rowHasChanged: (row1, row2) => row1 !== row2,
            }),
            loaded: false,
            styles: this.props.styles || styles,
            isRefreshing: false,
            nextData: false,
            renderFooter: true
        }

        this.dealWithDataItem = this.dealWithDataItem.bind(this);
        this._onRefresh = this._onRefresh.bind(this);
        this.pull = this.pull.bind(this);
    }

    componentWillMount(){
        if (this.props.data && _.isArray(this.props.data) && this.props.data.length){
            let data = this.props.data;
            _data = _.cloneDeep(data);
            this.setState({
                dataSource: this.state.dataSource.cloneWithRows(data),
                loaded: true,
            });
        }
        else {
            if (_data.length){
                this.setState({
                    dataSource: this.state.dataSource.cloneWithRows(_data),
                    loaded: true,
                });
            }
            else {
                this.setState({
                    loaded: false,
                });
            }
        }

        // loading function
        if (this.props.loading && _.isFunction(this.props.loading)){
            this.renderLoadingView = this.props.loading;
        }
        else {
            this.renderLoadingView = () => {
                return (
                    <View style={this.state.styles.loading}>
                        <ActivityIndicator size="large"/>
                    </View>
                )
            }
        }
    }

    componentDidMount(){
        if (this.props.initRender){
            this.props.initRender()
        }
    }

    componentDidUpdate(){

    }

    componentWillUnmount(){

    }

    componentWillReceiveProps(nextProps){
        let data;
        if (nextProps){
            if (_.isArray(nextProps)) data = nextProps
            if (nextProps.data && _.isArray(nextProps.data)) data = nextProps.data;
            _data = _.cloneDeep(data);
            if (data && data.length){
                this.setState({
                    loaded: true,
                    dataSource: this.state.dataSource.cloneWithRows(data),
                });
            }

            if (nextProps.data.renderFooter===false){
                this.setState({
                    renderFooter: nextProps.data.renderFooter
                })
            }
        }
        else {
            if (_data && _data.length){
                this.setState({
                    dataSource: this.state.dataSource.cloneWithRows(_data),
                    loaded: true,
                });
            }
            else {
                this.setState({
                    loaded: false,
                });
            }
        }

        // if (nextProps.data && _.isArray(nextProps.data)){
        //     let data = nextProps.data;
        //     _data = _.cloneDeep(data);
        //     this.setState({
        //         loaded: true,
        //         dataSource: this.state.dataSource.cloneWithRows(data),
        //     });
        // }
        // else {
        //     if (_data.length){
        //         this.setState({
        //             dataSource: this.state.dataSource.cloneWithRows(_data),
        //             loaded: true,
        //         });
        //     }
        //     else {
        //         this.setState({
        //             loaded: false,
        //         });
        //     }
        // }
    }

    dealWithDataItem(item, i){
        let _item = []
        if (item.title){
            if (_.isString(item.title)){
                _item.push ( <View key={"title"+i} style={this.state.styles.title}> <Text>{ item.title }</Text> </View> )
            }
            else {
                _item.push(item.title)
            }
        }

        if (item.content){
            if (_.isString(item.content)){
                _item.push ( <View key={"content"+i} style={this.state.styles.content}> <Text>{ item.content }</Text> </View> )
            }
            else {
                _item.push(item.content)
            }
        }

        let _style = this.state.styles.item;
        if (item.style){
            _style = item.style;
        }

        return (
            <View key={'item'+i} style={_style}>
                {_item}
            </View>
        )
    }

    _onRefresh(){
        this.setState({
            isRefreshing: true
        })
        if (this.props.refresh && typeof this.props.refresh === 'function'){
            this.props.refresh.call(this);
        }
    }

    pull(_new){
        if (_new && _new.data.length){
            this.setState({
                dataSource: this.state.dataSource.cloneWithRows(_new.data),
                loaded: true,
                isRefreshing: false
            });
        }
    }

    _renderFooter() {
        if (this.state.renderFooter){
            return (
                <View style={styles.reachedEndLoading}>
                    <Spinner size="large"/>
                </View>
            )
        }
        else {
            return null;
        }
	}

    _onLayout(){

    }


    render(){
        if (!this.state.loaded) {
            return this.renderLoadingView();
        }
        let _props = _.cloneDeep(this.props);
        delete _props.data;

        return (
            <ListView
                {..._props}
                onLayout={this._onLayout.bind(this)}
                automaticallyAdjustContentInsets={false}
                showsVerticalScrollIndicator
                removeClippedSubviews
                enableEmptySections
                ref={view => {this._listView = view}}
                pagingEnabled={false}
                initialListSize={10}
                scrollRenderAheadDistance={90}
                onEndReachedThreshold={30}
                renderFooter={this._renderFooter.bind(this)}

                dataSource={this.state.dataSource}
                renderRow={this.dealWithDataItem}
                style={this.state.styles.listView}
                refreshControl={
                  <RefreshControl
                    refreshing={this.state.isRefreshing}
                    onRefresh={this._onRefresh}
                  />
                }
            />
        )
    }
}

// store list
export let StoreList = function(component){
    if (!component){
        return _store(pure)
    }
    return _store(component)
}
