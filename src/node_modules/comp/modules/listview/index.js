/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import styles from 'css/index';
import _store from 'comp/mixins/store';
import {  RefreshControl, Text, View, Image, ListView, ActivityIndicator, TouchableHighlight, } from 'react-native';


// store list
export const store = (comp) => {
    if (!comp) return false;
    return (
        _store(comp)
    )
}



// pure list
let _data = [];
export class pure extends Component {
    constructor(props){
        super(props);
        this.state = {
            dataSource: new ListView.DataSource({
                rowHasChanged: (row1, row2) => row1 !== row2,
            }),
            loaded: false,
            styles: this.props.styles || styles,
            isRefreshing: false,
        }

        this.dealWithDataItem = this.dealWithDataItem.bind(this);
        this._onRefresh = this._onRefresh.bind(this);
    }

    componentWillMount(){
        if (this.props.data && _.isArray(this.props.data) && this.props.data.length){
            let data = this.props.data;
            _data = _.cloneDeep(data);
            this.setState({
                dataSource: this.state.dataSource.cloneWithRows(data),
                loaded: true,
            });
        }
        else {
            if (_data.length){
                this.setState({
                    dataSource: this.state.dataSource.cloneWithRows(_data),
                    loaded: true,
                });
            }
            else {
                this.setState({
                    loaded: false,
                });
            }
        }

        // loading function
        if (this.props.loading && _.isFunction(this.props.loading)){
            this.renderLoadingView = this.props.loading;
        }
        else {
            this.renderLoadingView = () => {
                return (
                    <View style={this.state.styles.loading}>
                        <ActivityIndicator size="large"/>
                    </View>
                )
            }
        }
    }

    componentDidMount(){

    }

    componentDidUpdate(){

    }

    componentWillUnmount(){

    }

    componentWillReceiveProps(nextProps){

        if (nextProps.data && _.isArray(nextProps.data)){
            let data = nextProps.data;
            _data = _.cloneDeep(data);
            this.setState({
                loaded: true,
                dataSource: this.state.dataSource.cloneWithRows(data),
            });
        }
        else {
            if (_data.length){
                this.setState({
                    dataSource: this.state.dataSource.cloneWithRows(_data),
                    loaded: true,
                });
            }
            else {
                this.setState({
                    loaded: false,
                });
            }
        }
    }

    dealWithDataItem(item, i){
        let _item = []
        if (item.title){
            if (_.isString(item.title)){
                _item.push ( <View key={"title"+i} style={this.state.styles.title}> <Text>{ item.title }</Text> </View> )
            }
            else {
                _item.push(item.title)
            }
        }

        if (item.content){
            if (_.isString(item.content)){
                _item.push ( <View key={"content"+i} style={this.state.styles.content}> <Text>{ item.content }</Text> </View> )
            }
            else {
                _item.push(item.content)
            }
        }

        let _style = this.state.styles.item;
        if (item.style){
            _style = item.style;
        }

        return (
            <View key={'item'+i} style={_style}>
                {_item}
            </View>
        )
    }

    _onRefresh(){
        this.setState({
            isRefreshing: true
        })
    }

    _renderFooter() {
		const {reachedEndPending} = this.props;
		if (reachedEndPending) {
			return (
				<View style={styles.reachedEndLoading}>
					<Spinner size="large"/>
				</View>
			)
		}
		return null;
	}


    render(){
        if (!this.state.loaded) {
            return this.renderLoadingView();
        }

        //contentInset={{bottom:44}}
        // canCancelContentTouches={true}
        // initialListSize={10}
        // alwaysBounceVertical={false}
        // showsVerticalScrollIndicator={true}
        // removeClippedSubviews={true}
        // {..._props}
        // enableEmptySections
        // automaticallyAdjustContentInsets={false}

        // renderFooter={this._renderFooter.bind(this)}   // 默认底部
        // onEndReached={this._onEndReached.bind(this)}   //到底了触发

        let _props = _.cloneDeep(this.props);
        delete _props.data;
        return (
            <ListView
                {..._props}
                showsVerticalScrollIndicator
                removeClippedSubviews
                enableEmptySections
                ref={view => {this._listView = view}}
                pagingEnabled={false}
                initialListSize={6}
                scrollRenderAheadDistance={90}
                onEndReachedThreshold={30}

                dataSource={this.state.dataSource}
                renderRow={this.dealWithDataItem}
                style={this.state.styles.listView}
                refreshControl={
                  <RefreshControl
                    refreshing={this.state.isRefreshing}
                    onRefresh={this._onRefresh}
                  />
                }
            />
        )
    }
}




// url list
export default class list extends Component {
    constructor(props){
        super(props);
        this.fetchData = this.fetchData.bind(this);
        this.options = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            mode: 'cors',
            cache: 'default'
        }

        try {
            if (this.props.data.options){
                this.options = _.extend({}, this.options, this.props.data.options)
            }
            this.state = {
                dataSource: new ListView.DataSource({
                    rowHasChanged: (row1, row2) => row1 !== row2,
                }),
                loaded: false,
                data: this.props.data,
                url: this.props.data.url || '',
                styles: this.props.styles || styles
            }
        } catch (e) {
            throw new Error('list组件传入数据不正确')
        }

        this.renderMovie = this.renderMovie.bind(this)
    }

    componentWillMount() {
        if (this.props.loading && _.isFunction(this.props.loading)){
            this.renderLoadingView = this.props.loading;
        }
        else {
            this.renderLoadingView = () => {
                return (
                    <View style={this.state.styles.loading}>
                        <ActivityIndicator size="large"/>
                    </View>
                )
            }
        }
    }

    // re render will trigger this method
    componentWillReceiveProps(nextProps) {
        if (nextProps.data){
            this.setState({
                data: nextProps.data,
                loaded: false
            })
            this.fetchData();
        }
    }

    // can re render
    shouldComponentUpdate(nextProps, nextState) {
        return true;
    }

    // re render之前
    componentWillUpdate(nextProps, nextState) {

    }

    // re render 之后
    componentDidUpdate(prevProps, prevState) {

    }

    componentDidMount() {
        this.fetchData();
    }

    fetchData(){
        if (!this.state.data.url){
            throw new Error('必须指定url');
            console.error('必须指定ListView的url');
        }
        fetch(this.state.data.url, this.options)
        .then( (response) => response.json() )
        .then((data)=>{
            this.setState({
                dataSource: this.state.dataSource.cloneWithRows(data),
                loaded: true,
            });
        })
        .done()
    }

    renderMovie(data) {
        return (
            <View style={this.state.styles.item}>
                <TouchableHighlight
                    style={this.state.styles.innerBg}
                    underlayColor="rgb(199, 199, 199)"
                    onPress={() => {
                        console.log('=======');
                    }}
                >
                <View style={this.state.styles.inner}>
                    <Image
                    source={{uri: data.img||'http://localhost:3000/images/logo128.png'}}
                    style={this.state.styles.thumbnail}
                    />
                    <View style={this.state.styles.rightPart}>
                        <Text style={this.state.styles.title}>{data.title.substring(0, 6)}</Text>
                        <Text style={this.state.styles.year}>{data.create_at}</Text>
                        <Text style={this.state.styles.subTitle}>{data.title.substring(0,14)}</Text>
                    </View>
                    <Image source={ images.leftTile } style={this.state.styles.dot} />
                </View>
                </TouchableHighlight>
            </View>
        );
    }

    render() {
        if (!this.state.loaded) {
            return this.renderLoadingView();
        }

        let _props = _.cloneDeep(this.props);
        delete _props.data;

        //contentInset={{bottom:44}}
        return (
            <ListView
                {..._props}
                automaticallyAdjustContentInsets={false}
                alwaysBounceVertical={false}
                dataSource={this.state.dataSource}
                renderRow={this.renderMovie}
                style={this.state.styles.listView}
            />
        )
    }
}
