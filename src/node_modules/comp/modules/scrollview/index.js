/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import styles from 'css/index';
import _store from 'comp/mixins/store';
import {  RefreshControl, Text, View, Image, ScrollView, ActivityIndicator, TouchableHighlight, } from 'react-native';


// store list
export const store = (comp) => {
    if (!comp) comp = pure;
    return (
        _store(comp)
    )
}

export default pure;

// pure list
export class pure extends Component {
    constructor(props){
        super(props);
        this.state = {
            data: this.props.data || [],
            loaded: false,
            styles: this.props.styles || styles
        }

        this.dealWithListData = this.dealWithListData.bind(this);
        this.dealWithDataItem = this.dealWithDataItem.bind(this);
    }

    componentWillMount(){
        if (this.props.data && _.isArray(this.props.data) && this.props.data.length){
            this.setState({
                data: this.dealWithListData(this.props.data),
                loaded: true,
            });
        }
        else {
            this.setState({
                loaded: false,
            });
        }

        // loading function
        if (this.props.loading && _.isFunction(this.props.loading)){
            this.renderLoadingView = this.props.loading;
        }
        else {
            this.renderLoadingView = () => {
                return (
                    <View style={this.state.styles.loading}>
                        <ActivityIndicator size="large"/>
                    </View>
                )
            }
        }
    }

    componentWillReceiveProps(nextProps){
        if (nextProps.data && _.isArray(nextProps.data) && nextProps.data.length){
            this.setState({
                loaded: true,
                data: this.dealWithListData(nextProps.data)
            });
        }
        else {
            this.setState({
                loaded: false,
            });
        }
    }

    componentDidMount(){
        
    }

    // re render 之后
    componentDidUpdate(prevProps, prevState) {

    }

    dealWithListData(data){
        let _this = this;
        let _items = [];
        data.map( (item, i) => { _items.push( _this.dealWithDataItem(item, i) )} )
        return _items
    }

    dealWithDataItem(item, i){
        let _item = []
        if (item.title){
            if (_.isString(item.title)){
                _item.push ( <View key={"title"+i} style={this.state.styles.title}> <Text>{ item.title }</Text> </View> )
            }
            else {
                _item.push(item.title)
            }
        }

        if (item.content){
            if (_.isString(item.content)){
                _item.push ( <View key={"content"+i} style={this.state.styles.content}> <Text>{ item.content }</Text> </View> )
            }
            else {
                _item.push(item.content)
            }
        }

        let _style = this.state.styles.item;
        if (item.style){
            _style = item.style;
        }

        return (
            <View key={'item'+i} style={_style}>
                {_item}
            </View>
        )
    }

    render(){
        if (!this.state.loaded) {
            return this.renderLoadingView();
        }

        //contentInset={{bottom:44}}
        let _props = _.merge({}, this.props);
        delete _props.data;
        return (
            <ScrollView
                {..._props}
                automaticallyAdjustContentInsets={false}
                alwaysBounceVertical={false}
                style={this.state.styles.scrollView} >
                {this.state.data}
            </ScrollView>
        )
    }
}
