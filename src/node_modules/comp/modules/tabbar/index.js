import React, { Component } from 'react';
import styles from 'css/tabbar'
import {
    StyleSheet,
    Text,
    View,
    Image,
    ListView,
    TouchableHighlight,
    TabBarIOS
} from 'react-native';

export default class FtabBar extends Component {
    constructor(props){
        super(props);
        this.state = {
            selectedTab: 'refaceMashdTab',
            notifCount: 0,
            presses: 0,
        }
        this._props = {};
        this.items = [];
        this._renderContent = this._renderContent.bind(this);
        this._fillList = this._fillList.bind(this);
        this._fillLoops = this._fillLoops.bind(this);

        this.connect = this.connect.bind(this);
        this.selectedTab = this.selectedTab.bind(this);

    }

    _renderContent(color, pageText, num){
        return (
            <View style={ styles.pageView }>
                <Text>{pageText}</Text>
            </View>
        )
    }

    connect(opts){
        let _this = this;
        if (_.isObject(opts)){
            _.mapKeys(opts, (v, k)=>{
                if (k.indexOf('on')===0){
                    _this._props[k] = v
                }
                else
                if (_.isFunction(v)) {
                    _this[k] = v.bind(_this)
                }
            })
            // this._props = _.extend({}, this._props, opts);
        }
    }

    selectedTab(id){
        this.setState({
            selectedTab: id,
        })
    }

    componentWillMount() {
        if (this.props.itemMethod){
            let mtd = this.props.itemMethod;
            this.mtd = mtd;
            if (_.isFunction(mtd)){
                mtd.call(this, this.connect, this.selectedTab, this.items)
            }
        }
    }

    componentDidMount() {
        let _this = this;
        _.mapKeys(this.refs, (v, k)=>{
            if (k!=='tabBar'){
                _this.items.push(
                    v._reactInternalInstance._renderedComponent._rootNodeID
                )
            }
        })
    }


    _fillLoops(data){
        let _items = [];
        let Item = TabBarIOS.Item;
        let _this = this;
        data.map( (item, i)=>{
            if (_.isObject(item) && item.title && _.isString(item.title)){
                let _title = item.title
                let _props = {
                    badge: i,
                    ref: 'tabBarItem'+i,
                    key: 'item'+i,
                    title: _title,
                    icon: item.icon||images.inner[_title],
                    selected: (this.state.selectedTab === _title),
                    children: item.content||_this._renderContent( '#cccccc', _title)
                }
                _props = _.extend({}, _props, _this._props)
                _items.push(
                    React.createElement(Item, _props)
                )
            }
        } )
        return _items;
    }

    _fillList(){
        let items=[];
        let _data;
        let _this = this;

        if (this.props.data){
            _data = this.props.data;
            if (_.isArray(_data) && _data.length){
                items = _this._fillLoops(_data);
            }
        }
        return items;
    }

    render() {
        let itemFirst = this._fillList()
        return (
            <TabBarIOS ref="tabBar">
                {itemFirst}
            </TabBarIOS>
        )
    }
}
