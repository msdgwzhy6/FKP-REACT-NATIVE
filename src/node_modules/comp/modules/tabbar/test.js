import React, { Component } from 'react';
import styles from 'css/tabbar'
import _store from 'comp/mixins/store';
import {
    StyleSheet,
    Text,
    View,
    Image,
    ListView,
    TouchableHighlight,
    Dimensions,
    ScrollView
} from 'react-native';

const {_height, _width} = Dimensions.get('window');

let self;
let _tabContents = [];
class FtabBar extends Component {
    constructor(props){
        super(props);
        self = this;

        this.tabs;  // bars data

        this.bars = [];  // normal bar
        this.actives = []; // active bar
        this.contents = {};  // pages
        this.badge = {};
        this.didMethod = []; // 结构完成后再执行的方法，用于onPress

        this.changeBars = false;


        this._barsView = this._barsView.bind(this);
        this.renderBars = this.renderBars.bind(this);
        this.renderContent = this.renderContent.bind(this);

        this.tabKey = []
        _tabContents = []
        _.forEach(this.props.data, (v, k)=>{
            this.tabKey.push(k);
            let _content;
            if (typeof v.content === 'string'){
                _content = ( <View key={k} style={ styles.content }>
                        <Text>{v.content}</Text>
                    </View> )
            } else {
                _content = (
                    <View key={k} style={[styles.content, {flex: 1} ]}>
                        {v.content}
                    </View>
                )
            }
            if (v.badge){
                this.badge[k] = v.badge
            }

            _tabContents.push({
                id: 'Tabs_'+k,
                content: v.content
            })

            // this.contents['Tabs_'+k] = {
            //     id: 'Tabs_'+k,
            //     content: _content
            // }
        })


        this.state = {
            data: this.props.data,
            selectedTab: 'refaceMashdTab',
            notifCount: 0,
            badge: this.badge,   // {aaa: 33, bbb: 44, ccc: 22}
            selected: 'Tabs_'+this.tabKey[0]
        }
    }

    _onpress(e){
        let title = 'Tabs_'+this.title;
        self.setState({
            selected: title
        })

        if (this.method){
            self.didMethod.push(self.state.data[this.title].method)
        }
    }

    componentWillMount() {
        this._barsView();
    }

    componentDidMount() {

    }

    componentDidUpdate(){
        // console.log(this.refs.contents.props.children);
        if (this.didMethod.length){
            let aftPress = this.didMethod.pop()
            aftPress.call(this)
        }
    }

    componentWillReceiveProps(nextProps){
        if (nextProps.data.badge){
            this.changeBars = true;
            this.setState({
                badge: nextProps.data.badge
            })
        }
    }

    componentWillUnmount(){

    }

    _filterBars(item){
        let _title;
        if (typeof item === 'string'){
            _title = ( <View>
                    <Text>{item}</Text>
                </View> )
        } else {
            _title = item;
        }
        return _title;
    }

    _barsView(){
        let bars = [];
        let bars_data = this.state.data;

        let i=0;
        this.bars = [];
        this.actives = [];
        _.forEach(bars_data, (v, k)=>{
            let _title;
            let _active;
            let _badge;
            let _method = false;

            if (_.isArray(v.title)){
                _title = this._filterBars(v.title[0])
                _active = this._filterBars(v.title[1])
            }
            else {
                _title = this._filterBars(v.title)
            }

            if (!_active){
                _active = _title;
            }

            if (typeof v.method === 'function'){
                _method = true;
            }

            if (this.state.badge[k]){
                let _bdg = this.state.badge[k]
                // console.log('========= img');
                // console.log(images);
                _badge = ( <Image source={images.badge} style={styles.badge}><Text style={styles.badgeText}>{_bdg}</Text></Image> )
                // _badge = <Text style={styles.badge}>{_bdg}</Text>
            }

            this.bars.push(
                <TouchableHighlight underlayColor="#f0f0f0" title={k} method={_method} key={'bar'+k} onPress={this._onpress} style={ styles.bar }>
                    <View style={{width:50,alignItems:'center',justifyContent:'center'}}>
                        {_title}
                        {_badge}
                    </View>
                </TouchableHighlight>
            )

            this.actives.push(
                <TouchableHighlight underlayColor="#f0f0f0" title={k} method={_method} key={'bar'+k} onPress={this._onpress} style={ styles.active }>
                    <View style={{width:50,alignItems:'center',justifyContent:'center'}}>
                        {_active}
                        {_badge}
                    </View>
                </TouchableHighlight>
            )
            i++;
        })
    }

    renderBars(){
        let _bars = [];
        if (this.changeBars){
            this.bars = [];
            this.actives = [];
            this._barsView();
        }
        this.changeBars = false;
        this.bars.map((item, i)=>{
            if (this.state.selected === 'Tabs_'+item.props.title){
                _bars.push(this.actives[i])
            }
            else {
                _bars.push(item)
            }
        })
        return _bars;
    }

    renderContent(){
        let title = this.state.selected;
        let _content;
        return _tabContents.map( (item, i)=>{
            if (item.id===title){
                if (typeof item.content === 'string'){
                    _content = (
                        <View
                            key={item.id}
                            style={ styles.content }
                        >
                            <Text>{item.content}</Text>
                        </View> )
                } else {
                    _content = (
                        <View
                            key={item.id}
                            style={[styles.content, {flex: 1} ]}
                        >
                            {item.content}
                        </View>
                    )
                }
                return _content;
            }
            else {
                if (typeof item.content === 'string'){
                    _content = (
                        <View
                            key={item.id}
                            style={ [styles.content, styles.hidden] }
                        >
                            <Text>{item.content}</Text>
                        </View> )
                }
                else {
                    _content = (
                        <View
                            key={item.id}
                            style={[styles.content, styles.hidden ]}
                        >
                            {item.content}
                        </View>
                    )
                }
                return _content;
            }
        })

    }


    render() {
        // let title = this.state.selected;
        // let item = this.contents[title];
        // { item.content }

        return (
            <View ref='tabBarView' style={styles.tabBarView}>
                <View ref='contents' style={styles.contents}>
                    {this.renderContent()}
                </View>
                <View ref='bars' style={styles.bars}>
                    {this.renderBars()}
                </View>
            </View>
        );
    }
}

export default function tabs(cfg, opts){
    if (opts && opts.sax){
        let StabBar = _store(FtabBar)
        return class normal extends Component {
            render() { return (
                <View style={{flex: 1,}}>
                    <StabBar name={opts.sax} data={cfg}/>
                </View>
            )}
        }
    }
    else {
        return class normal extends Component {
            render() { return (
                <View style={{flex: 1,}}>
                    <FtabBar name='NewTab' data={cfg}/>
                </View>
            )}
        }
    }
}
