/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * The examples provided by Facebook are for non-commercial testing and
 * evaluation purposes only.
 *
 * Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @providesModule UIExplorerTitle
 * @flow
 */
'use strict';
import React, { Component } from 'react';
import { StyleSheet, View, Text, Image, TouchableHighlight, TouchableOpacity, Platform } from 'react-native';

let styles;

export default class Item extends Component {

    static defaultProps = {

    }

    static propTypes = {
        icon: React.PropTypes.element,
        dot: React.PropTypes.element,
        attach: React.PropTypes.element,
        title: React.PropTypes.string.isRequired,
        descript: React.PropTypes.string,
        theme: React.PropTypes.object,
    }

    constructor(props) {
        super(props)
        this.state = {
            icon: null,
            dot: null,
            title: '',
            descript: null,
            theme: null,
            attach: null,
        }

        let _props = _.cloneDeep(this.props)
        delete _props.title;
        delete _props.descript;
        delete _props.dot;
        delete _props.icon;
        delete _props.theme;
        delete _props.attach;
        this._props = _props;
    }

    componentWillMount(){
        styles = _styles;
        if (this.props.theme){
            styles = this.props.theme
        }
        if (this.props.icon){
            let _icon = (
                <View style={styles.icon}>
                    {this.props.icon}
                </View>
            )
            this.setState({
                icon: _icon
            })
        }

        if (this.props.dot){
            let __style={
                left: 0,
                top: 0,
            }

            if (this.props.dot.props.style){
                let _style = this.props.dot.props.style;
                if (_style.left){
                    __style.left = _style.left;
                }
                if (_style.top){
                    __style.top = _style.top;
                }
                if (_style.right){
                    __style.right = _style.right;
                }
                if (_style.bottom){
                    __style.bottom = _style.bottom;
                }
            }

            let _dot = (
                <View style={[styles.dot, __style]}>
                    {this.props.dot}
                </View>
            )
            this.setState({
                dot: _dot
            })
        }

        if (this.props.attach){
            let _attach = (
                <View style={styles.attach}>
                    {this.props.attach}
                </View>
            )
            this.setState({
                attach: _attach
            })
        }

        if (this.props.title){
            let _title;
            let __title = this.props.title;
            if (__title.indexOf('@')===0){
                __title = __title.replace('@', '')
                _title = (
                    <View style={styles.separate}>
                        <Text style={styles.separate_title}> {__title} </Text>
                    </View>
                )
            }
            else {
                _title = (
                    <View>
                        <Text style={styles.title}> {this.props.title} </Text>
                    </View>
                )
            }
            this.setState({
                title: _title
            })
        }

        if (this.props.descript){
            let _descript = (
                <Text style={styles.descript}> {this.props.descript} </Text>
            )
            this.setState({
                descript: _descript
            })
        }
    }

    componentDidMount(){

    }

    render() {
        let _icon = this.state.icon;
        let _dot = this.state.dot;
        let _attach = this.state.attach;
        let _desc = this.state.descript;
        let _title = this.state.title;

        return (
            <TouchableHighlight
                {...this._props}
            >
                <View style={styles.item} >
                    {_icon}
                    <View style={styles.inner}>
                        {_title}
                        {_desc}
                    </View>
                    {_attach}
                    {_dot}
                </View>
            </TouchableHighlight>
        );
    }
}

var _styles = StyleSheet.create({
  item: {
    borderColor: '#d6d7da',
    borderTopWidth: 0.5,
    paddingHorizontal: 10,
    paddingVertical: 10,
    flexDirection: 'row',
    position: 'relative',
    backgroundColor: '#fff'
  },
  inner:{
      flexDirection: 'column'
  },
  title: {
    fontSize: 17,
    fontWeight: '500',
  },
  separate: {
      backgroundColor: "transparent",
  },
  separate_title: {
      fontSize: 14,
      color: '#656565'
  },
  descript: {
      marginLeft: 2,
    marginTop: 3,
    fontSize: 14,
    color: '#939393'
  },
  icon: {
      width: 60,
      alignItems: 'center',
      justifyContent: 'center'
  },
  attach: {
      flex: 1,
      alignItems: 'flex-end',
  },
  dot: {
      position: 'absolute',
      alignItems: 'flex-end',
  },
});
