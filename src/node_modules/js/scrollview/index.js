/**
 * Sample React Native App
 * Sample scrollview
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import { View, Text, Image, TouchableHighlight } from 'react-native';
import styles from 'css/index';
import FtabBarIos from 'comp/modules/tabbar';
import {store} from 'comp/modules/scrollview';


function dealWithListData(data){
    let _data = []
    if (data && data.length){
        data.map( (item, i)=>{
            _data.push({ title: (
                <TouchableHighlight
                    key={'titem'+i}
                    style={styles.innerBg}
                    underlayColor="rgb(199, 199, 199)"
                    onPress={() => {
                        console.log('=======');
                    }} >

                    <View style={styles.inner}>
                        <Image
                        source={{uri: item.img||'http://localhost:3000/images/logo128.png'}}
                        style={styles.thumbnail}
                        />
                        <View style={styles.rightPart}>
                            <Text style={styles.title}>{item.title.substring(0, 6)}</Text>
                            <Text style={styles.year}>{item.create_at}</Text>
                            <Text style={styles.subTitle}>{item.title.substring(0,14)}</Text>
                        </View>
                        <Image source={ images.leftTile } style={styles.dot} />
                    </View>

                </TouchableHighlight>
            )})
        })
    }
    return _data;
}

// 异步拿去数据
async function asyData(){
    let _data = await req( apis.dbdemo );
    let __data = dealWithListData(_data);
    SAX.setter('PureScroll', {data: __data})    // 重写ScrollView
}


// 列表数据
let blogScrollList = (type) => {
    let StoreScrollListView = store();
    return <StoreScrollListView name='PureScroll' data={[]} />
}

// tabbar数据
function tabBarData(){
    return [
        {title: 'facemash', content: blogScrollList()},
        {title: 'messages'},
        {title: '设置', icon: images.inner['settings']},
    ]
}

// for tabbar 回调方法
// 每一个item
function tabBaritemMethod(connect, selectedTab, tabItems){
    let _this = this;
    connect({
        onPress: function(event){
            if (event.target === tabItems[0]){
                selectedTab('facemash')
                asyData()
            }
            if (event.target === tabItems[1]){
                selectedTab('messages')
            }
            if (event.target === tabItems[2]){
                selectedTab('设置')
            }
        }
    })
}

// 输出结构
export default class hello extends Component {
    constructor(props){
        super(props);
    }

    render() {
        let dataTabBar = tabBarData();
        return (
            <View style={{flex: 1,}}>
                <FtabBarIos data={dataTabBar} itemMethod={tabBaritemMethod}/>
            </View>
        )
    }
}
